---
- name: create mirror registry for openshift 4 disconnected install
  hosts: localhost
  gather_facts: yes
  become: no

  vars_files:
    vars/main.yml

  collections:
    - containers.podman

  tasks:
  - name: create random secret for container registry
    when: container_state != 'absent'
    vars:
      secret_file: "{{ playbook_dir }}/files/secret_file"
    set_fact:
      registry_http_secret: "{{ lookup('password', secret_file, 'chars=ascii_letters,digits,hexdigits,punctuation length=28') }}"

  - name: Create self signed certs
    when: generate_self_signed_certs|bool and container_state != 'absent'
    block:
      - name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
        openssl_privatekey:
          path: "{{ ssl_key_file }}"

      - name: Generate an OpenSSL Certificate Signing Request
        openssl_csr:
          path: "{{ ssl_csr_file }}"
          privatekey_path: "{{ ssl_key_file }}"
          common_name: "{{ self_signed_certs_options.cert_common_name }}"
          country_name: "{{ self_signed_certs_options.cert_country }}"
          locality_name: "{{ self_signed_certs_options.cert_locality }}"
          organization_name: "{{ self_signed_certs_options.cert_org_name }}"
          organizational_unit_name: "{{ self_signed_certs_options.cert_org_unit }}"
          state_or_province_name: "{{ self_signed_certs_options.cert_state }}"

      - name: Generate certificate
        openssl_certificate:
          provider: selfsigned
          path: "{{ ssl_cert_file }}"
          privatekey_path: "{{ ssl_key_file }}"
          csr_path: "{{ ssl_csr_file }}"

  - name: tasks requiring escalated privileges
    become: yes
    block:
      - name: Ensure required directories exist
        file:
          path: "{{ item }}"
          state: directory
          mode: '0755'
        loop:
          - "{{ container_data_dir }}"
          - "{{ container_dir }}/auth"
          - "{{ container_dir }}/certs"
          - "/etc/docker/certs.d/{{ ansible_fqdn }}"
        when: container_state != 'absent'

      - name: open ports for registry
        firewalld:
          port: 5000/tcp
          permanent: yes
          immediate: yes
          state: enabled
        when: container_state != 'absent'

      - name: ensure cert files are copied to the register container cert directory
        copy:
          src: "{{ ssl_certs_source }}/{{ item }}"
          dest: "{{ container_dir }}/certs/{{ item }}"
        loop:
          - "{{ ssl_key_filename }}"
          - "{{ ssl_cert_filename }}"
        when: container_state != 'absent'

      - name: ensure cert files are copied to /etc/docker/certs.d
        copy:
          src: "{{ ssl_certs_source }}/{{ item }}"
          dest: "/etc/docker/certs.d/{{ ansible_fqdn }}/{{ item }}"
        loop:
          - "{{ ssl_key_filename }}"
          - "{{ ssl_cert_filename }}"
        when: container_state != 'absent'

      - name: install the required packages for the registry node
        yum:
          name: "python3,podman,httpd,httpd-tools,jq,python3-bcrypt"
          state: installed
        when: container_state != 'absent'

      - name: copy self-signed cert to /etc/pki/ca-trust/source/anchors
        when: container_state != 'absent'
        copy:
          src: "{{ ssl_cert_file }}"
          dest: "{{ update_trust_file_name }}"
        notify:
          - Update the host with the generated self-signed certs

      - name: create htpass user for registry container
        htpasswd:
          state: present
          path: "{{ container_dir }}/auth/htpasswd"
          username: "{{ registry_username }}"
          password: "{{ registry_password }}"
          mode: 0640
          crypt_scheme: bcrypt
        when: container_state != 'absent'

      - name: force all notified handlers to run
        meta: flush_handlers

      - name: Check if container registry is listening
        uri:
          url: "https://{{ ansible_fqdn }}:5000/v2/_catalog"
          user: "{{ registry_username }}"
          password: "{{ registry_password }}"
          force_basic_auth: yes
          validate_certs: no
        register: container_registry_listen
        ignore_errors: yes

      - name: Create and start or delete the registry container
        #when: container_registry_listen.status != 200
        containers.podman.podman_container:
          name: ocp4-registry-mirror
          image: registry:2
          state: "{{ container_state }}"
          ports:
              - "5000:5000"
          volume:
            - "{{ container_data_dir }}:/var/lib/registry:z"
            - "{{ container_dir }}/auth:/auth:z"
            - "{{ container_dir }}/certs:/certs:z"
          env:
              REGISTRY_AUTH_HTPASSWD_REALM: Registry
              REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
              REGISTRY_AUTH: htpasswd
              REGISTRY_HTTP_SECRET: "{{ registry_http_secret|default('Null') }}"
              REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/{{ ssl_cert_filename }}"
              REGISTRY_HTTP_TLS_KEY: "/certs/{{ ssl_key_filename }}"

      - name: Remove container registry certs
        file:
          path: "{{ item }}"
          state: absent
        loop:
          - "{{ container_dir }}/certs"
          - "{{ container_dir }}/auth"
          - "{{ update_trust_file_name }}"
          - "/etc/docker/certs.d/{{ ansible_fqdn }}"
        when: container_state == 'absent'

      - name: Get facts about the registry container
        containers.podman.podman_container_info:
          name:
            - ocp4-registry-mirror
        register: container_status
        when: container_state != 'absent'

      - name: show container status
        debug:
          msg: "The container ocp4-registry-mirror status is {{ container_status.containers.0.State.Status }}"
        when: container_state != 'absent'



  handlers:
  - name: Update the host with the generated self-signed certs
    command: update-ca-trust extract; update-ca-trust
    become: yes
