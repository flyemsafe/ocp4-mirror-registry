---
- name: encode local registry credentials to base64
  shell: echo -n '{{ registry_username }}:{{ registry_password }}' | base64 -w0
  register: registry_auth
  tags: [setup_htpasswd, deploy_registry, pullsecret]

- name: Declare the local registries username and password auth var
  set_fact:
    registry_local_auth: "{{ registry_auth.stdout }}"
  tags: [setup_htpasswd, deploy_registry, pullsecret]

- name: create a temp local registry auth file
  tempfile:
    state: file
    suffix: json
  register: temp_config
  tags: [setup_htpasswd, deploy_registry, pullsecret]

- name: registries.yml - generate the registry auth file
  vars:
    registry_fqdn: "{{ item.name }}"
    registry_port: "{{ item.port }}"
  template:
    src: templates/local_registry_auth.json.j2
    dest: "{{ temp_config.path }}"
  tags: [setup_htpasswd, deploy_registry, pullsecret]

- name: registries.yml - merge the openshift pull scecret with the local registry auth
  shell: >
    jq -s '{"auths": ( .[0].auths + .[1].auths ) }' {{ temp_config.path }} {{ pull_secret }} > {{ generated_pull_secret }}
  register: new_pull_secret
  tags: pullsecret
  
- name: create trust-bundle.txt file 
  template:
    src: templates/trust-bundle.txt.j2
    dest: "{{ additional_trust_bundle }}"
  tags: trust_file

- name: update additional_trust_bundle with two spaces at start of each line
  replace:
    path: "{{ additional_trust_bundle }}"
    regexp: '^'
    replace: '  '
  tags: trust_file

- name: create content-sources.txt file 
  template:
    src: templates/content-sources.txt.j2
    dest: "{{ image_content_sources }}"
  tags: content_sources

#- name: check login for {{ registry_fqdn }}:{{ registry_port }}
#  shell: podman login {{ registry_fqdn }}:{{ registry_port }} --get-login
#  register: podman_get_login
#  ignore_errors: yes
#  tags: registry_login
#
#- name: show debug
#  when: podman_get_login.rc != 0
#  debug:
#    var: podman_get_login
#  tags: registry_login
#
#- name: logout of registry {{ registry_fqdn }}:{{ registry_port }}
#  when: podman_get_login.rc != 0
#  shell: podman logout {{ registry_fqdn }}:{{ registry_port }} --authfile {{ generated_pull_secret }}
#  register: podman_logout
#  ignore_errors: yes
#  tags: registry_login
#
#- name: login into local registry
#  when: podman_get_login.rc != 0
#  shell: podman login {{ registry_fqdn }}:{{ registry_port }} --authfile {{ generated_pull_secret }}
#  register: podman_login
#  tags: registry_login


#podman login registry.lab.qubinode.io:5000 --authfile /home/admin/qubinode-installer/generated_pullsecret.json --username regadmin --password regadmin

#podman login registry.lab.qubinode.io:5000 --get-login
#Error: not logged into registry.lab.qubinode.io:5000




#content_sources:
#  - name: reg-quay
#    port: '5001'
#    url: quay.io/openshift-release-dev
#    sources:
#      - ocp-release
#      - ocp-v4.0-art-dev
#  - name: reg-redhat
#    port: '5002'
#    url: registry.redhat.io
#    sources:
#      - openshift4
#      - registry_redhatcontainer-native-virtualization
#      - registry_redhatocs4
#      - registry_redhatredhat
#      - registry_redhatrhceph
#      - registry_redhatrhscl
#  - name: reg-svc
#    port: '5004'
#    url: registry.svc.ci.openshift.org/ocp
#    sources:
#      - release
#  - name: reg-quay-cdn
#    port: '5005'
#    url: cdn02.quay.io/openshift-release-dev
#    sources:
#      - ocp-release
#      - ocp-v4.0-art-dev
#
#DNS.1 = reg-cloud-ocp.{{ registry_domain }}
#DNS.2 = reg-connect-rh.{{ registry_domain }}
#DNS.3 = registry.{{ registry_domain }}
#DNS.4 = reg-quay.{{ registry_domain }}
#DNS.5 = reg-redhat.{{ registry_domain }}
#DNS.6 = registry.{{ registry_domain }}
#
#quay.io
#registry.svc.ci.openshift.org
#cdn02.quay.io
#registry.redhat.io
#
#
#registry.lasthome.solace.krynn:5000